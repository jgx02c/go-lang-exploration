// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/download/file.proto

package download

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileDownloadClient is the client API for FileDownload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileDownloadClient interface {
	// DownloadFile streams a file to the client
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileDownload_DownloadFileClient, error)
	// ListFiles returns a list of files owned by the user
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}

type fileDownloadClient struct {
	cc grpc.ClientConnInterface
}

func NewFileDownloadClient(cc grpc.ClientConnInterface) FileDownloadClient {
	return &fileDownloadClient{cc}
}

func (c *fileDownloadClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileDownload_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileDownload_ServiceDesc.Streams[0], "/filedownload.FileDownload/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloadDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileDownload_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type fileDownloadDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileDownloadDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileDownloadClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/filedownload.FileDownload/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileDownloadServer is the server API for FileDownload service.
// All implementations must embed UnimplementedFileDownloadServer
// for forward compatibility
type FileDownloadServer interface {
	// DownloadFile streams a file to the client
	DownloadFile(*DownloadFileRequest, FileDownload_DownloadFileServer) error
	// ListFiles returns a list of files owned by the user
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	mustEmbedUnimplementedFileDownloadServer()
}

// UnimplementedFileDownloadServer must be embedded to have forward compatible implementations.
type UnimplementedFileDownloadServer struct {
}

func (UnimplementedFileDownloadServer) DownloadFile(*DownloadFileRequest, FileDownload_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileDownloadServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileDownloadServer) mustEmbedUnimplementedFileDownloadServer() {}

// UnsafeFileDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileDownloadServer will
// result in compilation errors.
type UnsafeFileDownloadServer interface {
	mustEmbedUnimplementedFileDownloadServer()
}

func RegisterFileDownloadServer(s grpc.ServiceRegistrar, srv FileDownloadServer) {
	s.RegisterService(&FileDownload_ServiceDesc, srv)
}

func _FileDownload_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileDownloadServer).DownloadFile(m, &fileDownloadDownloadFileServer{stream})
}

type FileDownload_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type fileDownloadDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileDownloadDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileDownload_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileDownloadServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filedownload.FileDownload/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileDownloadServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileDownload_ServiceDesc is the grpc.ServiceDesc for FileDownload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileDownload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filedownload.FileDownload",
	HandlerType: (*FileDownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _FileDownload_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _FileDownload_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/download/file.proto",
}
